//Question 1:
class Solution:
    def construct2DArray(self, original: List[int], m: int, n: int) -> List[List[int]]:
        arr = [[0] * n for _ in range(m)]
        if len(original) != m * n:
            ar=[]
            return ar
        else:
            for i in range(m * n):
                arr[i // n][i % n] = original[i]
        return arr


//Question 2:
class Solution:
    def arrangeCoins(self, n: int) -> int:
        a=0
        b=1
        while(n>=b):
            n=n-b
            a+=1
            b=a+1
        return a

//Question 3:
class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
        result=[0]*len(nums)
        a=0
        b=len(nums)-1
        last=len(nums)-1
        while(a<=b):
            c=nums[a]**2
            d=nums[b]**2
            if(c>d):
                result[last]=c
                a+=1
                last-=1
            else:
                result[last]=d
                b-=1
                last-=1

        return result

//Question 4:
class Solution:
    def findDifference(self, nums1: List[int], nums2: List[int]) -> List[List[int]]:
        ls1=[]
        ls2=[]
        for i in nums1:
            if ((i not in nums2) and (i not in ls1)):
                ls1.append(i)
        for j in nums2:
            if ((j not in nums1 ) and (j not in ls2)):
                ls2.append(j)
        mls=[ls1,ls2]
        return mls

//Question 5:
class Solution:
    def findDuplicates(self, nums: List[int]) -> List[int]:
        dic={}
        result=[]
        for i in nums:
            if(i not in dic):
                dic[i]=1
            else:
                dic[i]+=1
        for i in dic.keys():
            if dic[i]==2:
                result.append(i)
        return result

//Question 7:
class Solution:
    def findMin(self, nums: List[int]) -> int:
        i=0
        j=len(nums)-1
        while(i<j):
            mid=(i+j)//2
            if(nums[mid]>nums[mid+1]):
                return nums[mid+1]
            elif(nums[mid]<nums[mid-1]):
                return nums[mid]
            elif(nums[mid]>nums[j]):
                i=mid+1
            elif(nums[mid]<nums[j]):
                j=mid-1
        return nums[i]


//Question 8:
class Solution:
    def findOriginalArray(self, changed: List[int]) -> List[int]:
        if(len(changed)%2!=0):
            return []
        count=Counter(changed)
        result=[]
        changed.sort()
        for i in changed:
            mul=2*i
            if count[i]==0:
                continue
            elif mul in count.keys() and count[mul] > 0:
                count[mul]-=1
                count[i]-=1
                result.append(i)
            elif mul not in count or count[mul]==0:
                return []

        return result

